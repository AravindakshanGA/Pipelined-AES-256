
AES_GCM_Redo_Nios.elf:     file format elf32-littlenios2
AES_GCM_Redo_Nios.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020020

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00001210 memsz 0x00001210 flags r-x
    LOAD off    0x00002230 vaddr 0x00021230 paddr 0x00021320 align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x00002410 vaddr 0x00021410 paddr 0x00021410 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00020020  00020020  00002320  2**0
                  CONTENTS
  2 .text         00000fb4  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000025c  00020fd4  00020fd4  00001fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f0  00021230  00021320  00002230  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00021410  00021410  00002410  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00021420  00021420  00002320  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00002320  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000318  00000000  00000000  00002348  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000042f3  00000000  00000000  00002660  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000165f  00000000  00000000  00006953  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001a89  00000000  00000000  00007fb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000478  00000000  00000000  00009a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000111f  00000000  00000000  00009eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001610  00000000  00000000  0000afd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0000c5e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000268  00000000  00000000  0000c628  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000d9ea  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0000d9ed  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000d9f9  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000d9fa  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0000d9fb  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0000da06  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0000da11  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000015  00000000  00000000  0000da1c  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003f  00000000  00000000  0000da31  2**0
                  CONTENTS, READONLY
 26 .jdi          00005bed  00000000  00000000  0000da70  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000326a6  00000000  00000000  0001365d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020020 l    d  .text	00000000 .text
00020fd4 l    d  .rodata	00000000 .rodata
00021230 l    d  .rwdata	00000000 .rwdata
00021410 l    d  .bss	00000000 .bss
00021420 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../AES_GCM_Redo_Nios_bsp//obj/HAL/src/crt0.o
00020058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000204d4 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00021230 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00020e54 g     F .text	0000002c alt_main
00020424 g     F .text	00000080 _puts_r
00021320 g       *ABS*	00000000 __flash_rwdata_start
000203d8 g     F .text	0000004c printf
00020fcc g     F .text	00000008 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00021410 g     O .bss	00000004 errno
00021418 g     O .bss	00000004 alt_argv
00029310 g       *ABS*	00000000 _gp
00020e80 g     F .text	00000004 usleep
00020374 g     F .text	00000028 memcpy
000204a4 g     F .text	00000014 puts
0002039c g     F .text	0000003c _printf_r
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00020c90 g     F .text	00000064 .hidden __udivsi3
0002005c g     F .text	000000d8 send_word_data
00021310 g     O .rwdata	00000004 _global_impure_ptr
00021420 g       *ABS*	00000000 __bss_end
00020fc4 g     F .text	00000004 alt_dcache_flush_all
00021320 g       *ABS*	00000000 __ram_rwdata_end
00020e84 g     F .text	00000060 write
00021230 g       *ABS*	00000000 __ram_rodata_end
00021318 g     O .rwdata	00000004 jtag_uart_0
00020cf4 g     F .text	00000058 .hidden __umodsi3
00021420 g       *ABS*	00000000 end
00040000 g       *ABS*	00000000 __alt_stack_pointer
00020f08 g     F .text	00000034 altera_avalon_jtag_uart_write
00020540 g     F .text	0000052c ___vfprintf_internal_r
00020020 g     F .text	0000003c _start
00020f04 g     F .text	00000004 alt_sys_init
00020d4c g     F .text	00000028 .hidden __mulsi3
00021230 g       *ABS*	00000000 __ram_rwdata_start
00020fd4 g       *ABS*	00000000 __ram_rodata_start
00020f3c g     F .text	00000088 alt_busy_sleep
00021420 g       *ABS*	00000000 __alt_stack_base
00020a88 g     F .text	000000b8 __sfvwrite_small_dev
00021410 g       *ABS*	00000000 __bss_start
00020224 g     F .text	00000150 main
00021414 g     O .bss	00000004 alt_envp
0002131c g     O .rwdata	00000004 alt_errno
00020b98 g     F .text	00000084 .hidden __divsi3
00020fd4 g       *ABS*	00000000 __flash_rodata_start
00020ee4 g     F .text	00000020 alt_irq_init
00020b40 g     F .text	00000058 _write_r
00021314 g     O .rwdata	00000004 _impure_ptr
0002141c g     O .bss	00000004 alt_argc
00020020 g       *ABS*	00000000 __ram_exceptions_start
00021320 g       *ABS*	00000000 _edata
00021420 g       *ABS*	00000000 _end
00020020 g       *ABS*	00000000 __ram_exceptions_end
00020134 g     F .text	000000f0 read_word_data
00020c1c g     F .text	00000074 .hidden __modsi3
00040000 g       *ABS*	00000000 __alt_data_end
0002000c g       .entry	00000000 _exit
000204b8 g     F .text	0000001c strlen
00020fc8 g     F .text	00000004 alt_icache_flush_all
00020a6c g     F .text	0000001c __vfprintf_internal
00020d74 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08400814 	ori	at,at,32
    jmp r1
   20008:	0800683a 	jmp	at

0002000c <_exit>:
	...

Disassembly of section .text:

00020020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20020:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   20024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   20028:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   2002c:	d6a4c414 	ori	gp,gp,37648
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20030:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20034:	10850414 	ori	r2,r2,5136

    movhi r3, %hi(__bss_end)
   20038:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   2003c:	18c50814 	ori	r3,r3,5152

    beq r2, r3, 1f
   20040:	10c00326 	beq	r2,r3,20050 <_start+0x30>

0:
    stw zero, (r2)
   20044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2004c:	10fffd36 	bltu	r2,r3,20044 <__alt_data_end+0xfffe0044>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20050:	0020d740 	call	20d74 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20054:	0020e540 	call	20e54 <alt_main>

00020058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20058:	003fff06 	br	20058 <__alt_data_end+0xfffe0058>

0002005c <send_word_data>:
#include "io.h"
#include "system.h"
#include "stdio.h"
#include "time.h"

void send_word_data (int * arr) {
   2005c:	defffc04 	addi	sp,sp,-16
   20060:	dc800215 	stw	r18,8(sp)
	unsigned int arr_iter, status;
	for(arr_iter = 0; arr_iter < 4; arr_iter++){
		IOWR(REG32_AVALON_INTERFACE_0_BASE , 3, *(arr+arr_iter));
   20064:	04800134 	movhi	r18,4
#include "io.h"
#include "system.h"
#include "stdio.h"
#include "time.h"

void send_word_data (int * arr) {
   20068:	dc400115 	stw	r17,4(sp)
   2006c:	dc000015 	stw	r16,0(sp)
   20070:	dfc00315 	stw	ra,12(sp)
   20074:	2021883a 	mov	r16,r4
   20078:	24400404 	addi	r17,r4,16
	unsigned int arr_iter, status;
	for(arr_iter = 0; arr_iter < 4; arr_iter++){
		IOWR(REG32_AVALON_INTERFACE_0_BASE , 3, *(arr+arr_iter));
   2007c:	94850304 	addi	r18,r18,5132
   20080:	80800017 	ldw	r2,0(r16)
   20084:	90800035 	stwio	r2,0(r18)
		printf("%x , ",*(arr+arr_iter));
   20088:	81400017 	ldw	r5,0(r16)
   2008c:	010000b4 	movhi	r4,2
   20090:	2103f504 	addi	r4,r4,4052
   20094:	00203d80 	call	203d8 <printf>
		usleep(1000000);
   20098:	010003f4 	movhi	r4,15
   2009c:	21109004 	addi	r4,r4,16960
   200a0:	84000104 	addi	r16,r16,4
   200a4:	0020e800 	call	20e80 <usleep>
#include "stdio.h"
#include "time.h"

void send_word_data (int * arr) {
	unsigned int arr_iter, status;
	for(arr_iter = 0; arr_iter < 4; arr_iter++){
   200a8:	847ff51e 	bne	r16,r17,20080 <__alt_data_end+0xfffe0080>
		IOWR(REG32_AVALON_INTERFACE_0_BASE , 3, *(arr+arr_iter));
		printf("%x , ",*(arr+arr_iter));
		usleep(1000000);
	}
	printf("\n=====SEND COMMAND WORD========\n") ;
   200ac:	010000b4 	movhi	r4,2
   200b0:	2103f704 	addi	r4,r4,4060
   200b4:	00204a40 	call	204a4 <puts>
	IOWR(REG32_AVALON_INTERFACE_0_BASE , 1, 1);
   200b8:	00800134 	movhi	r2,4
   200bc:	10850104 	addi	r2,r2,5124
   200c0:	00c00044 	movi	r3,1
   200c4:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
   200c8:	010003f4 	movhi	r4,15
   200cc:	21109004 	addi	r4,r4,16960
   200d0:	0020e800 	call	20e80 <usleep>

	printf("=====WAIT FOR SETUP========\n") ;
   200d4:	010000b4 	movhi	r4,2
   200d8:	2103ff04 	addi	r4,r4,4092
	do {
		status = (int)  IORD(REG32_AVALON_INTERFACE_0_BASE,2);
   200dc:	04400134 	movhi	r17,4
	}
	printf("\n=====SEND COMMAND WORD========\n") ;
	IOWR(REG32_AVALON_INTERFACE_0_BASE , 1, 1);
	usleep(1000000);

	printf("=====WAIT FOR SETUP========\n") ;
   200e0:	00204a40 	call	204a4 <puts>
	do {
		status = (int)  IORD(REG32_AVALON_INTERFACE_0_BASE,2);
   200e4:	8c450204 	addi	r17,r17,5128
   200e8:	8c000037 	ldwio	r16,0(r17)
		usleep(1000000);
   200ec:	010003f4 	movhi	r4,15
   200f0:	21109004 	addi	r4,r4,16960
   200f4:	0020e800 	call	20e80 <usleep>
	} while ( status == 0 );
   200f8:	803ffb26 	beq	r16,zero,200e8 <__alt_data_end+0xfffe00e8>

	printf("=====RESET STATUS========\n") ;
   200fc:	010000b4 	movhi	r4,2
   20100:	21040604 	addi	r4,r4,4120
   20104:	00204a40 	call	204a4 <puts>
	IOWR(REG32_AVALON_INTERFACE_0_BASE , 2, 0);
   20108:	00800134 	movhi	r2,4
   2010c:	10850204 	addi	r2,r2,5128
   20110:	10000035 	stwio	zero,0(r2)
	usleep(1000000);
   20114:	010003f4 	movhi	r4,15
   20118:	21109004 	addi	r4,r4,16960
}
   2011c:	dfc00317 	ldw	ra,12(sp)
   20120:	dc800217 	ldw	r18,8(sp)
   20124:	dc400117 	ldw	r17,4(sp)
   20128:	dc000017 	ldw	r16,0(sp)
   2012c:	dec00404 	addi	sp,sp,16
		usleep(1000000);
	} while ( status == 0 );

	printf("=====RESET STATUS========\n") ;
	IOWR(REG32_AVALON_INTERFACE_0_BASE , 2, 0);
	usleep(1000000);
   20130:	0020e801 	jmpi	20e80 <usleep>

00020134 <read_word_data>:
}

void read_word_data (int * recv_arr, int command_number) {
   20134:	defffb04 	addi	sp,sp,-20
   20138:	dc000015 	stw	r16,0(sp)
   2013c:	2021883a 	mov	r16,r4
	unsigned int arr_iter, status, recvd_data;

	printf("\n=====SEND READ_DATA WORD========\n") ;
   20140:	010000b4 	movhi	r4,2
   20144:	21040d04 	addi	r4,r4,4148
	printf("=====RESET STATUS========\n") ;
	IOWR(REG32_AVALON_INTERFACE_0_BASE , 2, 0);
	usleep(1000000);
}

void read_word_data (int * recv_arr, int command_number) {
   20148:	dc400115 	stw	r17,4(sp)
   2014c:	dfc00415 	stw	ra,16(sp)
   20150:	dcc00315 	stw	r19,12(sp)
   20154:	dc800215 	stw	r18,8(sp)
   20158:	2823883a 	mov	r17,r5
	unsigned int arr_iter, status, recvd_data;

	printf("\n=====SEND READ_DATA WORD========\n") ;
   2015c:	00204a40 	call	204a4 <puts>
	IOWR(REG32_AVALON_INTERFACE_0_BASE , 1, command_number);
   20160:	00800134 	movhi	r2,4
   20164:	10850104 	addi	r2,r2,5124
   20168:	14400035 	stwio	r17,0(r2)
	usleep(1000000);
   2016c:	010003f4 	movhi	r4,15
   20170:	21109004 	addi	r4,r4,16960
   20174:	0020e800 	call	20e80 <usleep>

	printf("=====WAIT FOR SETUP========\n") ;
   20178:	010000b4 	movhi	r4,2
   2017c:	2103ff04 	addi	r4,r4,4092
	do {
		status = (int)  IORD(REG32_AVALON_INTERFACE_0_BASE,2);
   20180:	04c00134 	movhi	r19,4

	printf("\n=====SEND READ_DATA WORD========\n") ;
	IOWR(REG32_AVALON_INTERFACE_0_BASE , 1, command_number);
	usleep(1000000);

	printf("=====WAIT FOR SETUP========\n") ;
   20184:	00204a40 	call	204a4 <puts>
	do {
		status = (int)  IORD(REG32_AVALON_INTERFACE_0_BASE,2);
   20188:	9cc50204 	addi	r19,r19,5128
		usleep(1000000);
	} while ( status != 1 );
   2018c:	04400044 	movi	r17,1
	IOWR(REG32_AVALON_INTERFACE_0_BASE , 1, command_number);
	usleep(1000000);

	printf("=====WAIT FOR SETUP========\n") ;
	do {
		status = (int)  IORD(REG32_AVALON_INTERFACE_0_BASE,2);
   20190:	9c800037 	ldwio	r18,0(r19)
		usleep(1000000);
   20194:	010003f4 	movhi	r4,15
   20198:	21109004 	addi	r4,r4,16960
   2019c:	0020e800 	call	20e80 <usleep>
	} while ( status != 1 );
   201a0:	947ffb1e 	bne	r18,r17,20190 <__alt_data_end+0xfffe0190>

	printf("=====RESET STATUS========\n") ;
   201a4:	010000b4 	movhi	r4,2
   201a8:	21040604 	addi	r4,r4,4120
   201ac:	00204a40 	call	204a4 <puts>
	IOWR(REG32_AVALON_INTERFACE_0_BASE , 2, 0);
   201b0:	00800134 	movhi	r2,4
   201b4:	10850204 	addi	r2,r2,5128
   201b8:	10000035 	stwio	zero,0(r2)
	usleep(1000000);
   201bc:	010003f4 	movhi	r4,15
   201c0:	21109004 	addi	r4,r4,16960
   201c4:	04400134 	movhi	r17,4

	for(arr_iter = 4; arr_iter < 8; arr_iter++){
   201c8:	04c00134 	movhi	r19,4
		usleep(1000000);
	} while ( status != 1 );

	printf("=====RESET STATUS========\n") ;
	IOWR(REG32_AVALON_INTERFACE_0_BASE , 2, 0);
	usleep(1000000);
   201cc:	0020e800 	call	20e80 <usleep>
   201d0:	8c450404 	addi	r17,r17,5136

	for(arr_iter = 4; arr_iter < 8; arr_iter++){
   201d4:	9cc50804 	addi	r19,r19,5152
		recvd_data = (int) IORD(REG32_AVALON_INTERFACE_0_BASE, arr_iter);
   201d8:	8c800037 	ldwio	r18,0(r17)
		usleep(1000000);
   201dc:	010003f4 	movhi	r4,15
   201e0:	21109004 	addi	r4,r4,16960
   201e4:	0020e800 	call	20e80 <usleep>
		printf("%x , ", recvd_data);
   201e8:	010000b4 	movhi	r4,2
   201ec:	900b883a 	mov	r5,r18
   201f0:	2103f504 	addi	r4,r4,4052
   201f4:	00203d80 	call	203d8 <printf>
   201f8:	8c400104 	addi	r17,r17,4
		*(recv_arr+arr_iter-4) = recvd_data;
   201fc:	84800015 	stw	r18,0(r16)
   20200:	84000104 	addi	r16,r16,4

	printf("=====RESET STATUS========\n") ;
	IOWR(REG32_AVALON_INTERFACE_0_BASE , 2, 0);
	usleep(1000000);

	for(arr_iter = 4; arr_iter < 8; arr_iter++){
   20204:	8cfff41e 	bne	r17,r19,201d8 <__alt_data_end+0xfffe01d8>
		recvd_data = (int) IORD(REG32_AVALON_INTERFACE_0_BASE, arr_iter);
		usleep(1000000);
		printf("%x , ", recvd_data);
		*(recv_arr+arr_iter-4) = recvd_data;
	}
}
   20208:	dfc00417 	ldw	ra,16(sp)
   2020c:	dcc00317 	ldw	r19,12(sp)
   20210:	dc800217 	ldw	r18,8(sp)
   20214:	dc400117 	ldw	r17,4(sp)
   20218:	dc000017 	ldw	r16,0(sp)
   2021c:	dec00504 	addi	sp,sp,20
   20220:	f800283a 	ret

00020224 <main>:

int main() {
   20224:	deffd204 	addi	sp,sp,-184
    int cipher_key[8] = {0xfeffe992, 0x8665731c, 0x6d6a8f94, 0x67308308,
   20228:	014000b4 	movhi	r5,2
   2022c:	d9002004 	addi	r4,sp,128
   20230:	01800804 	movi	r6,32
   20234:	29447304 	addi	r5,r5,4556
		printf("%x , ", recvd_data);
		*(recv_arr+arr_iter-4) = recvd_data;
	}
}

int main() {
   20238:	dfc02d15 	stw	ra,180(sp)
   2023c:	dc002c15 	stw	r16,176(sp)
    int cipher_key[8] = {0xfeffe992, 0x8665731c, 0x6d6a8f94, 0x67308308,
   20240:	00203740 	call	20374 <memcpy>
    						0xfeffe992, 0x8665731c, 0x6d6a8f94, 0x67308308} ;
    int plain_text[16] = {0xd9313225, 0xf88406e5, 0xa55909c5, 0xaff5269a,
   20244:	01801004 	movi	r6,64
   20248:	014000b4 	movhi	r5,2
   2024c:	d989883a 	add	r4,sp,r6
   20250:	29447b04 	addi	r5,r5,4588
   20254:	00203740 	call	20374 <memcpy>
    int IV [4] = {0xcafebabe, 0xfacedbad, 0xdecaf888, 0x00000000};
    int size_word [4] = {0x00000000, 0x000000a0, 0x00000000,0x000001e0};
    int output_text[16];
    int tag_value [4];

    printf("\n====SEND CIPHER KEY - 1=====\n") ;
   20258:	010000b4 	movhi	r4,2
   2025c:	21041604 	addi	r4,r4,4184
   20260:	00204a40 	call	204a4 <puts>
    send_word_data(&cipher_key[0]);
   20264:	d9002004 	addi	r4,sp,128
   20268:	002005c0 	call	2005c <send_word_data>

    printf("\n====SEND CIPHER KEY - 2=====\n") ;
   2026c:	010000b4 	movhi	r4,2
   20270:	21041e04 	addi	r4,r4,4216
   20274:	00204a40 	call	204a4 <puts>
    send_word_data(&cipher_key[4]);
   20278:	d9002404 	addi	r4,sp,144
   2027c:	002005c0 	call	2005c <send_word_data>
//    send_word_data(&aad_data[0]);
//
//    printf("\n====AAD - 2=====\n") ;
//    send_word_data(&aad_data[4]);

    printf("\n====SEND PLAIN TEXT - 1=====\n") ;
   20280:	010000b4 	movhi	r4,2
   20284:	21042604 	addi	r4,r4,4248
   20288:	00204a40 	call	204a4 <puts>
    send_word_data(&plain_text[0]);
   2028c:	d9001004 	addi	r4,sp,64
   20290:	002005c0 	call	2005c <send_word_data>

	printf("\n====SEND PLAIN TEXT - 2=====\n") ;
   20294:	010000b4 	movhi	r4,2
   20298:	21042e04 	addi	r4,r4,4280
   2029c:	00204a40 	call	204a4 <puts>
	send_word_data(&plain_text[4]);
   202a0:	d9001404 	addi	r4,sp,80
   202a4:	002005c0 	call	2005c <send_word_data>

	printf("\n====SEND PLAIN TEXT - 3=====\n") ;
   202a8:	010000b4 	movhi	r4,2
   202ac:	21043604 	addi	r4,r4,4312
   202b0:	00204a40 	call	204a4 <puts>
	send_word_data(&plain_text[8]);
   202b4:	d9001804 	addi	r4,sp,96
   202b8:	002005c0 	call	2005c <send_word_data>

	printf("\n====SEND PLAIN TEXT - 4=====\n") ;
   202bc:	010000b4 	movhi	r4,2
   202c0:	21043e04 	addi	r4,r4,4344
   202c4:	00204a40 	call	204a4 <puts>
	send_word_data(&plain_text[12]);
   202c8:	d9001c04 	addi	r4,sp,112
   202cc:	002005c0 	call	2005c <send_word_data>

	printf("\n=====SEND START SIGNAL========\n") ;
   202d0:	010000b4 	movhi	r4,2
   202d4:	21044604 	addi	r4,r4,4376
   202d8:	00204a40 	call	204a4 <puts>
	IOWR(REG32_AVALON_INTERFACE_0_BASE , 1, 3);
   202dc:	00800134 	movhi	r2,4
   202e0:	040000c4 	movi	r16,3
   202e4:	10850104 	addi	r2,r2,5124
   202e8:	14000035 	stwio	r16,0(r2)
	usleep(1000000);
   202ec:	010003f4 	movhi	r4,15
   202f0:	21109004 	addi	r4,r4,16960
   202f4:	0020e800 	call	20e80 <usleep>

	printf("\n====READ CIPHER TEXT - 1=====\n") ;
   202f8:	010000b4 	movhi	r4,2
   202fc:	21044e04 	addi	r4,r4,4408
   20300:	00204a40 	call	204a4 <puts>
	read_word_data(&output_text[0], 2);
   20304:	01400084 	movi	r5,2
   20308:	d809883a 	mov	r4,sp
   2030c:	00201340 	call	20134 <read_word_data>

	printf("\n====READ CIPHER TEXT - 2=====\n") ;
   20310:	010000b4 	movhi	r4,2
   20314:	21045604 	addi	r4,r4,4440
   20318:	00204a40 	call	204a4 <puts>
	read_word_data(&output_text[4], 2);
   2031c:	01400084 	movi	r5,2
   20320:	d9000404 	addi	r4,sp,16
   20324:	00201340 	call	20134 <read_word_data>

	printf("\n====READ CIPHER TEXT - 3=====\n") ;
   20328:	010000b4 	movhi	r4,2
   2032c:	21045e04 	addi	r4,r4,4472
   20330:	00204a40 	call	204a4 <puts>
	read_word_data(&output_text[8], 2);
   20334:	01400084 	movi	r5,2
   20338:	d9000804 	addi	r4,sp,32
   2033c:	00201340 	call	20134 <read_word_data>

	printf("\n====READ CIPHER TEXT - 4=====\n") ;
   20340:	010000b4 	movhi	r4,2
   20344:	21046604 	addi	r4,r4,4504
   20348:	00204a40 	call	204a4 <puts>
	read_word_data(&output_text[12], 2);
   2034c:	01400084 	movi	r5,2
   20350:	d9000c04 	addi	r4,sp,48
   20354:	00201340 	call	20134 <read_word_data>

	printf("\n====READ TAG=====\n") ;
   20358:	010000b4 	movhi	r4,2
   2035c:	21046e04 	addi	r4,r4,4536
   20360:	00204a40 	call	204a4 <puts>
	read_word_data(&tag_value[0], 3);
   20364:	800b883a 	mov	r5,r16
   20368:	d9002804 	addi	r4,sp,160
   2036c:	00201340 	call	20134 <read_word_data>
   20370:	003fff06 	br	20370 <__alt_data_end+0xfffe0370>

00020374 <memcpy>:
   20374:	2005883a 	mov	r2,r4
   20378:	2007883a 	mov	r3,r4
   2037c:	218d883a 	add	r6,r4,r6
   20380:	19800526 	beq	r3,r6,20398 <memcpy+0x24>
   20384:	29000003 	ldbu	r4,0(r5)
   20388:	18c00044 	addi	r3,r3,1
   2038c:	29400044 	addi	r5,r5,1
   20390:	193fffc5 	stb	r4,-1(r3)
   20394:	003ffa06 	br	20380 <__alt_data_end+0xfffe0380>
   20398:	f800283a 	ret

0002039c <_printf_r>:
   2039c:	defffd04 	addi	sp,sp,-12
   203a0:	dfc00015 	stw	ra,0(sp)
   203a4:	d9800115 	stw	r6,4(sp)
   203a8:	d9c00215 	stw	r7,8(sp)
   203ac:	20c00217 	ldw	r3,8(r4)
   203b0:	018000b4 	movhi	r6,2
   203b4:	3182a204 	addi	r6,r6,2696
   203b8:	19800115 	stw	r6,4(r3)
   203bc:	280d883a 	mov	r6,r5
   203c0:	21400217 	ldw	r5,8(r4)
   203c4:	d9c00104 	addi	r7,sp,4
   203c8:	00205400 	call	20540 <___vfprintf_internal_r>
   203cc:	dfc00017 	ldw	ra,0(sp)
   203d0:	dec00304 	addi	sp,sp,12
   203d4:	f800283a 	ret

000203d8 <printf>:
   203d8:	defffc04 	addi	sp,sp,-16
   203dc:	dfc00015 	stw	ra,0(sp)
   203e0:	d9400115 	stw	r5,4(sp)
   203e4:	d9800215 	stw	r6,8(sp)
   203e8:	d9c00315 	stw	r7,12(sp)
   203ec:	008000b4 	movhi	r2,2
   203f0:	1084c504 	addi	r2,r2,4884
   203f4:	10800017 	ldw	r2,0(r2)
   203f8:	014000b4 	movhi	r5,2
   203fc:	2942a204 	addi	r5,r5,2696
   20400:	10c00217 	ldw	r3,8(r2)
   20404:	d9800104 	addi	r6,sp,4
   20408:	19400115 	stw	r5,4(r3)
   2040c:	200b883a 	mov	r5,r4
   20410:	11000217 	ldw	r4,8(r2)
   20414:	0020a6c0 	call	20a6c <__vfprintf_internal>
   20418:	dfc00017 	ldw	ra,0(sp)
   2041c:	dec00404 	addi	sp,sp,16
   20420:	f800283a 	ret

00020424 <_puts_r>:
   20424:	defffd04 	addi	sp,sp,-12
   20428:	dc000015 	stw	r16,0(sp)
   2042c:	2021883a 	mov	r16,r4
   20430:	2809883a 	mov	r4,r5
   20434:	dfc00215 	stw	ra,8(sp)
   20438:	dc400115 	stw	r17,4(sp)
   2043c:	2823883a 	mov	r17,r5
   20440:	00204b80 	call	204b8 <strlen>
   20444:	81400217 	ldw	r5,8(r16)
   20448:	010000b4 	movhi	r4,2
   2044c:	2102a204 	addi	r4,r4,2696
   20450:	29000115 	stw	r4,4(r5)
   20454:	100f883a 	mov	r7,r2
   20458:	880d883a 	mov	r6,r17
   2045c:	8009883a 	mov	r4,r16
   20460:	0020a880 	call	20a88 <__sfvwrite_small_dev>
   20464:	00ffffc4 	movi	r3,-1
   20468:	10c00926 	beq	r2,r3,20490 <_puts_r+0x6c>
   2046c:	81400217 	ldw	r5,8(r16)
   20470:	018000b4 	movhi	r6,2
   20474:	01c00044 	movi	r7,1
   20478:	28800117 	ldw	r2,4(r5)
   2047c:	31848b04 	addi	r6,r6,4652
   20480:	8009883a 	mov	r4,r16
   20484:	103ee83a 	callr	r2
   20488:	10bfffe0 	cmpeqi	r2,r2,-1
   2048c:	0085c83a 	sub	r2,zero,r2
   20490:	dfc00217 	ldw	ra,8(sp)
   20494:	dc400117 	ldw	r17,4(sp)
   20498:	dc000017 	ldw	r16,0(sp)
   2049c:	dec00304 	addi	sp,sp,12
   204a0:	f800283a 	ret

000204a4 <puts>:
   204a4:	008000b4 	movhi	r2,2
   204a8:	1084c504 	addi	r2,r2,4884
   204ac:	200b883a 	mov	r5,r4
   204b0:	11000017 	ldw	r4,0(r2)
   204b4:	00204241 	jmpi	20424 <_puts_r>

000204b8 <strlen>:
   204b8:	2005883a 	mov	r2,r4
   204bc:	10c00007 	ldb	r3,0(r2)
   204c0:	18000226 	beq	r3,zero,204cc <strlen+0x14>
   204c4:	10800044 	addi	r2,r2,1
   204c8:	003ffc06 	br	204bc <__alt_data_end+0xfffe04bc>
   204cc:	1105c83a 	sub	r2,r2,r4
   204d0:	f800283a 	ret

000204d4 <print_repeat>:
   204d4:	defffb04 	addi	sp,sp,-20
   204d8:	dc800315 	stw	r18,12(sp)
   204dc:	dc400215 	stw	r17,8(sp)
   204e0:	dc000115 	stw	r16,4(sp)
   204e4:	dfc00415 	stw	ra,16(sp)
   204e8:	2025883a 	mov	r18,r4
   204ec:	2823883a 	mov	r17,r5
   204f0:	d9800005 	stb	r6,0(sp)
   204f4:	3821883a 	mov	r16,r7
   204f8:	04000a0e 	bge	zero,r16,20524 <print_repeat+0x50>
   204fc:	88800117 	ldw	r2,4(r17)
   20500:	01c00044 	movi	r7,1
   20504:	d80d883a 	mov	r6,sp
   20508:	880b883a 	mov	r5,r17
   2050c:	9009883a 	mov	r4,r18
   20510:	103ee83a 	callr	r2
   20514:	843fffc4 	addi	r16,r16,-1
   20518:	103ff726 	beq	r2,zero,204f8 <__alt_data_end+0xfffe04f8>
   2051c:	00bfffc4 	movi	r2,-1
   20520:	00000106 	br	20528 <print_repeat+0x54>
   20524:	0005883a 	mov	r2,zero
   20528:	dfc00417 	ldw	ra,16(sp)
   2052c:	dc800317 	ldw	r18,12(sp)
   20530:	dc400217 	ldw	r17,8(sp)
   20534:	dc000117 	ldw	r16,4(sp)
   20538:	dec00504 	addi	sp,sp,20
   2053c:	f800283a 	ret

00020540 <___vfprintf_internal_r>:
   20540:	deffe504 	addi	sp,sp,-108
   20544:	d8c00804 	addi	r3,sp,32
   20548:	ddc01815 	stw	r23,96(sp)
   2054c:	dd801715 	stw	r22,92(sp)
   20550:	dd401615 	stw	r21,88(sp)
   20554:	dd001515 	stw	r20,84(sp)
   20558:	dcc01415 	stw	r19,80(sp)
   2055c:	dc801315 	stw	r18,76(sp)
   20560:	dc401215 	stw	r17,72(sp)
   20564:	dc001115 	stw	r16,68(sp)
   20568:	dfc01a15 	stw	ra,104(sp)
   2056c:	df001915 	stw	fp,100(sp)
   20570:	2029883a 	mov	r20,r4
   20574:	2823883a 	mov	r17,r5
   20578:	382d883a 	mov	r22,r7
   2057c:	d9800f15 	stw	r6,60(sp)
   20580:	0021883a 	mov	r16,zero
   20584:	d8000e15 	stw	zero,56(sp)
   20588:	d8000a15 	stw	zero,40(sp)
   2058c:	002b883a 	mov	r21,zero
   20590:	0027883a 	mov	r19,zero
   20594:	0025883a 	mov	r18,zero
   20598:	d8000c15 	stw	zero,48(sp)
   2059c:	d8000b15 	stw	zero,44(sp)
   205a0:	002f883a 	mov	r23,zero
   205a4:	d8c00915 	stw	r3,36(sp)
   205a8:	d8c00f17 	ldw	r3,60(sp)
   205ac:	19000003 	ldbu	r4,0(r3)
   205b0:	20803fcc 	andi	r2,r4,255
   205b4:	1080201c 	xori	r2,r2,128
   205b8:	10bfe004 	addi	r2,r2,-128
   205bc:	10011e26 	beq	r2,zero,20a38 <___vfprintf_internal_r+0x4f8>
   205c0:	00c00044 	movi	r3,1
   205c4:	b8c01426 	beq	r23,r3,20618 <___vfprintf_internal_r+0xd8>
   205c8:	1dc00216 	blt	r3,r23,205d4 <___vfprintf_internal_r+0x94>
   205cc:	b8000626 	beq	r23,zero,205e8 <___vfprintf_internal_r+0xa8>
   205d0:	00011506 	br	20a28 <___vfprintf_internal_r+0x4e8>
   205d4:	01400084 	movi	r5,2
   205d8:	b9401d26 	beq	r23,r5,20650 <___vfprintf_internal_r+0x110>
   205dc:	014000c4 	movi	r5,3
   205e0:	b9402b26 	beq	r23,r5,20690 <___vfprintf_internal_r+0x150>
   205e4:	00011006 	br	20a28 <___vfprintf_internal_r+0x4e8>
   205e8:	01400944 	movi	r5,37
   205ec:	1140fc26 	beq	r2,r5,209e0 <___vfprintf_internal_r+0x4a0>
   205f0:	88800117 	ldw	r2,4(r17)
   205f4:	d9000005 	stb	r4,0(sp)
   205f8:	01c00044 	movi	r7,1
   205fc:	d80d883a 	mov	r6,sp
   20600:	880b883a 	mov	r5,r17
   20604:	a009883a 	mov	r4,r20
   20608:	103ee83a 	callr	r2
   2060c:	1000d81e 	bne	r2,zero,20970 <___vfprintf_internal_r+0x430>
   20610:	84000044 	addi	r16,r16,1
   20614:	00010406 	br	20a28 <___vfprintf_internal_r+0x4e8>
   20618:	01400c04 	movi	r5,48
   2061c:	1140fa26 	beq	r2,r5,20a08 <___vfprintf_internal_r+0x4c8>
   20620:	01400944 	movi	r5,37
   20624:	11400a1e 	bne	r2,r5,20650 <___vfprintf_internal_r+0x110>
   20628:	d8800005 	stb	r2,0(sp)
   2062c:	88800117 	ldw	r2,4(r17)
   20630:	b80f883a 	mov	r7,r23
   20634:	d80d883a 	mov	r6,sp
   20638:	880b883a 	mov	r5,r17
   2063c:	a009883a 	mov	r4,r20
   20640:	103ee83a 	callr	r2
   20644:	1000ca1e 	bne	r2,zero,20970 <___vfprintf_internal_r+0x430>
   20648:	84000044 	addi	r16,r16,1
   2064c:	0000f506 	br	20a24 <___vfprintf_internal_r+0x4e4>
   20650:	25fff404 	addi	r23,r4,-48
   20654:	bdc03fcc 	andi	r23,r23,255
   20658:	00c00244 	movi	r3,9
   2065c:	1dc00936 	bltu	r3,r23,20684 <___vfprintf_internal_r+0x144>
   20660:	00bfffc4 	movi	r2,-1
   20664:	90800426 	beq	r18,r2,20678 <___vfprintf_internal_r+0x138>
   20668:	01400284 	movi	r5,10
   2066c:	9009883a 	mov	r4,r18
   20670:	0020d4c0 	call	20d4c <__mulsi3>
   20674:	00000106 	br	2067c <___vfprintf_internal_r+0x13c>
   20678:	0005883a 	mov	r2,zero
   2067c:	b8a5883a 	add	r18,r23,r2
   20680:	0000e206 	br	20a0c <___vfprintf_internal_r+0x4cc>
   20684:	01400b84 	movi	r5,46
   20688:	1140e426 	beq	r2,r5,20a1c <___vfprintf_internal_r+0x4dc>
   2068c:	05c00084 	movi	r23,2
   20690:	213ff404 	addi	r4,r4,-48
   20694:	27003fcc 	andi	fp,r4,255
   20698:	00c00244 	movi	r3,9
   2069c:	1f000936 	bltu	r3,fp,206c4 <___vfprintf_internal_r+0x184>
   206a0:	00bfffc4 	movi	r2,-1
   206a4:	98800426 	beq	r19,r2,206b8 <___vfprintf_internal_r+0x178>
   206a8:	01400284 	movi	r5,10
   206ac:	9809883a 	mov	r4,r19
   206b0:	0020d4c0 	call	20d4c <__mulsi3>
   206b4:	00000106 	br	206bc <___vfprintf_internal_r+0x17c>
   206b8:	0005883a 	mov	r2,zero
   206bc:	e0a7883a 	add	r19,fp,r2
   206c0:	0000d906 	br	20a28 <___vfprintf_internal_r+0x4e8>
   206c4:	00c01b04 	movi	r3,108
   206c8:	10c0d226 	beq	r2,r3,20a14 <___vfprintf_internal_r+0x4d4>
   206cc:	013fffc4 	movi	r4,-1
   206d0:	99000226 	beq	r19,r4,206dc <___vfprintf_internal_r+0x19c>
   206d4:	d8000b15 	stw	zero,44(sp)
   206d8:	00000106 	br	206e0 <___vfprintf_internal_r+0x1a0>
   206dc:	04c00044 	movi	r19,1
   206e0:	01001a44 	movi	r4,105
   206e4:	11001626 	beq	r2,r4,20740 <___vfprintf_internal_r+0x200>
   206e8:	20800916 	blt	r4,r2,20710 <___vfprintf_internal_r+0x1d0>
   206ec:	010018c4 	movi	r4,99
   206f0:	11008826 	beq	r2,r4,20914 <___vfprintf_internal_r+0x3d4>
   206f4:	01001904 	movi	r4,100
   206f8:	11001126 	beq	r2,r4,20740 <___vfprintf_internal_r+0x200>
   206fc:	01001604 	movi	r4,88
   20700:	1100c81e 	bne	r2,r4,20a24 <___vfprintf_internal_r+0x4e4>
   20704:	00c00044 	movi	r3,1
   20708:	d8c00e15 	stw	r3,56(sp)
   2070c:	00001506 	br	20764 <___vfprintf_internal_r+0x224>
   20710:	01001cc4 	movi	r4,115
   20714:	11009826 	beq	r2,r4,20978 <___vfprintf_internal_r+0x438>
   20718:	20800416 	blt	r4,r2,2072c <___vfprintf_internal_r+0x1ec>
   2071c:	01001bc4 	movi	r4,111
   20720:	1100c01e 	bne	r2,r4,20a24 <___vfprintf_internal_r+0x4e4>
   20724:	05400204 	movi	r21,8
   20728:	00000f06 	br	20768 <___vfprintf_internal_r+0x228>
   2072c:	01001d44 	movi	r4,117
   20730:	11000d26 	beq	r2,r4,20768 <___vfprintf_internal_r+0x228>
   20734:	01001e04 	movi	r4,120
   20738:	11000a26 	beq	r2,r4,20764 <___vfprintf_internal_r+0x224>
   2073c:	0000b906 	br	20a24 <___vfprintf_internal_r+0x4e4>
   20740:	d8c00a17 	ldw	r3,40(sp)
   20744:	b7000104 	addi	fp,r22,4
   20748:	18000726 	beq	r3,zero,20768 <___vfprintf_internal_r+0x228>
   2074c:	df000d15 	stw	fp,52(sp)
   20750:	b5c00017 	ldw	r23,0(r22)
   20754:	b800080e 	bge	r23,zero,20778 <___vfprintf_internal_r+0x238>
   20758:	05efc83a 	sub	r23,zero,r23
   2075c:	02400044 	movi	r9,1
   20760:	00000606 	br	2077c <___vfprintf_internal_r+0x23c>
   20764:	05400404 	movi	r21,16
   20768:	b0c00104 	addi	r3,r22,4
   2076c:	d8c00d15 	stw	r3,52(sp)
   20770:	b5c00017 	ldw	r23,0(r22)
   20774:	d8000a15 	stw	zero,40(sp)
   20778:	0013883a 	mov	r9,zero
   2077c:	d839883a 	mov	fp,sp
   20780:	b8001726 	beq	r23,zero,207e0 <___vfprintf_internal_r+0x2a0>
   20784:	a80b883a 	mov	r5,r21
   20788:	b809883a 	mov	r4,r23
   2078c:	da401015 	stw	r9,64(sp)
   20790:	0020c900 	call	20c90 <__udivsi3>
   20794:	a80b883a 	mov	r5,r21
   20798:	1009883a 	mov	r4,r2
   2079c:	102d883a 	mov	r22,r2
   207a0:	0020d4c0 	call	20d4c <__mulsi3>
   207a4:	b885c83a 	sub	r2,r23,r2
   207a8:	00c00244 	movi	r3,9
   207ac:	da401017 	ldw	r9,64(sp)
   207b0:	18800216 	blt	r3,r2,207bc <___vfprintf_internal_r+0x27c>
   207b4:	10800c04 	addi	r2,r2,48
   207b8:	00000506 	br	207d0 <___vfprintf_internal_r+0x290>
   207bc:	d8c00e17 	ldw	r3,56(sp)
   207c0:	18000226 	beq	r3,zero,207cc <___vfprintf_internal_r+0x28c>
   207c4:	10800dc4 	addi	r2,r2,55
   207c8:	00000106 	br	207d0 <___vfprintf_internal_r+0x290>
   207cc:	108015c4 	addi	r2,r2,87
   207d0:	e0800005 	stb	r2,0(fp)
   207d4:	b02f883a 	mov	r23,r22
   207d8:	e7000044 	addi	fp,fp,1
   207dc:	003fe806 	br	20780 <__alt_data_end+0xfffe0780>
   207e0:	e6efc83a 	sub	r23,fp,sp
   207e4:	9dc5c83a 	sub	r2,r19,r23
   207e8:	0080090e 	bge	zero,r2,20810 <___vfprintf_internal_r+0x2d0>
   207ec:	e085883a 	add	r2,fp,r2
   207f0:	01400c04 	movi	r5,48
   207f4:	d8c00917 	ldw	r3,36(sp)
   207f8:	e009883a 	mov	r4,fp
   207fc:	e0c0032e 	bgeu	fp,r3,2080c <___vfprintf_internal_r+0x2cc>
   20800:	e7000044 	addi	fp,fp,1
   20804:	21400005 	stb	r5,0(r4)
   20808:	e0bffa1e 	bne	fp,r2,207f4 <__alt_data_end+0xfffe07f4>
   2080c:	e6efc83a 	sub	r23,fp,sp
   20810:	d8c00b17 	ldw	r3,44(sp)
   20814:	4dd1883a 	add	r8,r9,r23
   20818:	922dc83a 	sub	r22,r18,r8
   2081c:	18001626 	beq	r3,zero,20878 <___vfprintf_internal_r+0x338>
   20820:	48000a26 	beq	r9,zero,2084c <___vfprintf_internal_r+0x30c>
   20824:	00800b44 	movi	r2,45
   20828:	d8800805 	stb	r2,32(sp)
   2082c:	88800117 	ldw	r2,4(r17)
   20830:	01c00044 	movi	r7,1
   20834:	d9800804 	addi	r6,sp,32
   20838:	880b883a 	mov	r5,r17
   2083c:	a009883a 	mov	r4,r20
   20840:	103ee83a 	callr	r2
   20844:	10004a1e 	bne	r2,zero,20970 <___vfprintf_internal_r+0x430>
   20848:	84000044 	addi	r16,r16,1
   2084c:	0580070e 	bge	zero,r22,2086c <___vfprintf_internal_r+0x32c>
   20850:	b00f883a 	mov	r7,r22
   20854:	01800c04 	movi	r6,48
   20858:	880b883a 	mov	r5,r17
   2085c:	a009883a 	mov	r4,r20
   20860:	00204d40 	call	204d4 <print_repeat>
   20864:	1000421e 	bne	r2,zero,20970 <___vfprintf_internal_r+0x430>
   20868:	85a1883a 	add	r16,r16,r22
   2086c:	e02d883a 	mov	r22,fp
   20870:	bf2fc83a 	sub	r23,r23,fp
   20874:	00002006 	br	208f8 <___vfprintf_internal_r+0x3b8>
   20878:	0580090e 	bge	zero,r22,208a0 <___vfprintf_internal_r+0x360>
   2087c:	b00f883a 	mov	r7,r22
   20880:	01800804 	movi	r6,32
   20884:	880b883a 	mov	r5,r17
   20888:	a009883a 	mov	r4,r20
   2088c:	da401015 	stw	r9,64(sp)
   20890:	00204d40 	call	204d4 <print_repeat>
   20894:	da401017 	ldw	r9,64(sp)
   20898:	1000351e 	bne	r2,zero,20970 <___vfprintf_internal_r+0x430>
   2089c:	85a1883a 	add	r16,r16,r22
   208a0:	483ff226 	beq	r9,zero,2086c <__alt_data_end+0xfffe086c>
   208a4:	00800b44 	movi	r2,45
   208a8:	d8800805 	stb	r2,32(sp)
   208ac:	88800117 	ldw	r2,4(r17)
   208b0:	01c00044 	movi	r7,1
   208b4:	d9800804 	addi	r6,sp,32
   208b8:	880b883a 	mov	r5,r17
   208bc:	a009883a 	mov	r4,r20
   208c0:	103ee83a 	callr	r2
   208c4:	10002a1e 	bne	r2,zero,20970 <___vfprintf_internal_r+0x430>
   208c8:	84000044 	addi	r16,r16,1
   208cc:	003fe706 	br	2086c <__alt_data_end+0xfffe086c>
   208d0:	b5bfffc4 	addi	r22,r22,-1
   208d4:	b0800003 	ldbu	r2,0(r22)
   208d8:	01c00044 	movi	r7,1
   208dc:	d9800804 	addi	r6,sp,32
   208e0:	d8800805 	stb	r2,32(sp)
   208e4:	88800117 	ldw	r2,4(r17)
   208e8:	880b883a 	mov	r5,r17
   208ec:	a009883a 	mov	r4,r20
   208f0:	103ee83a 	callr	r2
   208f4:	10001e1e 	bne	r2,zero,20970 <___vfprintf_internal_r+0x430>
   208f8:	8585c83a 	sub	r2,r16,r22
   208fc:	b5c9883a 	add	r4,r22,r23
   20900:	e085883a 	add	r2,fp,r2
   20904:	013ff216 	blt	zero,r4,208d0 <__alt_data_end+0xfffe08d0>
   20908:	1021883a 	mov	r16,r2
   2090c:	dd800d17 	ldw	r22,52(sp)
   20910:	00004406 	br	20a24 <___vfprintf_internal_r+0x4e4>
   20914:	00800044 	movi	r2,1
   20918:	1480080e 	bge	r2,r18,2093c <___vfprintf_internal_r+0x3fc>
   2091c:	95ffffc4 	addi	r23,r18,-1
   20920:	b80f883a 	mov	r7,r23
   20924:	01800804 	movi	r6,32
   20928:	880b883a 	mov	r5,r17
   2092c:	a009883a 	mov	r4,r20
   20930:	00204d40 	call	204d4 <print_repeat>
   20934:	10000e1e 	bne	r2,zero,20970 <___vfprintf_internal_r+0x430>
   20938:	85e1883a 	add	r16,r16,r23
   2093c:	b0800017 	ldw	r2,0(r22)
   20940:	01c00044 	movi	r7,1
   20944:	d80d883a 	mov	r6,sp
   20948:	d8800005 	stb	r2,0(sp)
   2094c:	88800117 	ldw	r2,4(r17)
   20950:	880b883a 	mov	r5,r17
   20954:	a009883a 	mov	r4,r20
   20958:	b5c00104 	addi	r23,r22,4
   2095c:	103ee83a 	callr	r2
   20960:	1000031e 	bne	r2,zero,20970 <___vfprintf_internal_r+0x430>
   20964:	84000044 	addi	r16,r16,1
   20968:	b82d883a 	mov	r22,r23
   2096c:	00002d06 	br	20a24 <___vfprintf_internal_r+0x4e4>
   20970:	00bfffc4 	movi	r2,-1
   20974:	00003106 	br	20a3c <___vfprintf_internal_r+0x4fc>
   20978:	b5c00017 	ldw	r23,0(r22)
   2097c:	b7000104 	addi	fp,r22,4
   20980:	b809883a 	mov	r4,r23
   20984:	00204b80 	call	204b8 <strlen>
   20988:	9091c83a 	sub	r8,r18,r2
   2098c:	102d883a 	mov	r22,r2
   20990:	0200090e 	bge	zero,r8,209b8 <___vfprintf_internal_r+0x478>
   20994:	400f883a 	mov	r7,r8
   20998:	01800804 	movi	r6,32
   2099c:	880b883a 	mov	r5,r17
   209a0:	a009883a 	mov	r4,r20
   209a4:	da001015 	stw	r8,64(sp)
   209a8:	00204d40 	call	204d4 <print_repeat>
   209ac:	da001017 	ldw	r8,64(sp)
   209b0:	103fef1e 	bne	r2,zero,20970 <__alt_data_end+0xfffe0970>
   209b4:	8221883a 	add	r16,r16,r8
   209b8:	88800117 	ldw	r2,4(r17)
   209bc:	b00f883a 	mov	r7,r22
   209c0:	b80d883a 	mov	r6,r23
   209c4:	880b883a 	mov	r5,r17
   209c8:	a009883a 	mov	r4,r20
   209cc:	103ee83a 	callr	r2
   209d0:	103fe71e 	bne	r2,zero,20970 <__alt_data_end+0xfffe0970>
   209d4:	85a1883a 	add	r16,r16,r22
   209d8:	e02d883a 	mov	r22,fp
   209dc:	00001106 	br	20a24 <___vfprintf_internal_r+0x4e4>
   209e0:	00c00044 	movi	r3,1
   209e4:	04ffffc4 	movi	r19,-1
   209e8:	d8000e15 	stw	zero,56(sp)
   209ec:	d8c00a15 	stw	r3,40(sp)
   209f0:	05400284 	movi	r21,10
   209f4:	9825883a 	mov	r18,r19
   209f8:	d8000c15 	stw	zero,48(sp)
   209fc:	d8000b15 	stw	zero,44(sp)
   20a00:	182f883a 	mov	r23,r3
   20a04:	00000806 	br	20a28 <___vfprintf_internal_r+0x4e8>
   20a08:	ddc00b15 	stw	r23,44(sp)
   20a0c:	05c00084 	movi	r23,2
   20a10:	00000506 	br	20a28 <___vfprintf_internal_r+0x4e8>
   20a14:	00c00044 	movi	r3,1
   20a18:	d8c00c15 	stw	r3,48(sp)
   20a1c:	05c000c4 	movi	r23,3
   20a20:	00000106 	br	20a28 <___vfprintf_internal_r+0x4e8>
   20a24:	002f883a 	mov	r23,zero
   20a28:	d8c00f17 	ldw	r3,60(sp)
   20a2c:	18c00044 	addi	r3,r3,1
   20a30:	d8c00f15 	stw	r3,60(sp)
   20a34:	003edc06 	br	205a8 <__alt_data_end+0xfffe05a8>
   20a38:	8005883a 	mov	r2,r16
   20a3c:	dfc01a17 	ldw	ra,104(sp)
   20a40:	df001917 	ldw	fp,100(sp)
   20a44:	ddc01817 	ldw	r23,96(sp)
   20a48:	dd801717 	ldw	r22,92(sp)
   20a4c:	dd401617 	ldw	r21,88(sp)
   20a50:	dd001517 	ldw	r20,84(sp)
   20a54:	dcc01417 	ldw	r19,80(sp)
   20a58:	dc801317 	ldw	r18,76(sp)
   20a5c:	dc401217 	ldw	r17,72(sp)
   20a60:	dc001117 	ldw	r16,68(sp)
   20a64:	dec01b04 	addi	sp,sp,108
   20a68:	f800283a 	ret

00020a6c <__vfprintf_internal>:
   20a6c:	008000b4 	movhi	r2,2
   20a70:	1084c504 	addi	r2,r2,4884
   20a74:	300f883a 	mov	r7,r6
   20a78:	280d883a 	mov	r6,r5
   20a7c:	200b883a 	mov	r5,r4
   20a80:	11000017 	ldw	r4,0(r2)
   20a84:	00205401 	jmpi	20540 <___vfprintf_internal_r>

00020a88 <__sfvwrite_small_dev>:
   20a88:	2880000b 	ldhu	r2,0(r5)
   20a8c:	1080020c 	andi	r2,r2,8
   20a90:	10002126 	beq	r2,zero,20b18 <__sfvwrite_small_dev+0x90>
   20a94:	2880008f 	ldh	r2,2(r5)
   20a98:	defffa04 	addi	sp,sp,-24
   20a9c:	dc000015 	stw	r16,0(sp)
   20aa0:	dfc00515 	stw	ra,20(sp)
   20aa4:	dd000415 	stw	r20,16(sp)
   20aa8:	dcc00315 	stw	r19,12(sp)
   20aac:	dc800215 	stw	r18,8(sp)
   20ab0:	dc400115 	stw	r17,4(sp)
   20ab4:	2821883a 	mov	r16,r5
   20ab8:	10001216 	blt	r2,zero,20b04 <__sfvwrite_small_dev+0x7c>
   20abc:	2027883a 	mov	r19,r4
   20ac0:	3025883a 	mov	r18,r6
   20ac4:	3823883a 	mov	r17,r7
   20ac8:	05010004 	movi	r20,1024
   20acc:	04400b0e 	bge	zero,r17,20afc <__sfvwrite_small_dev+0x74>
   20ad0:	880f883a 	mov	r7,r17
   20ad4:	a440010e 	bge	r20,r17,20adc <__sfvwrite_small_dev+0x54>
   20ad8:	01c10004 	movi	r7,1024
   20adc:	8140008f 	ldh	r5,2(r16)
   20ae0:	900d883a 	mov	r6,r18
   20ae4:	9809883a 	mov	r4,r19
   20ae8:	0020b400 	call	20b40 <_write_r>
   20aec:	0080050e 	bge	zero,r2,20b04 <__sfvwrite_small_dev+0x7c>
   20af0:	88a3c83a 	sub	r17,r17,r2
   20af4:	90a5883a 	add	r18,r18,r2
   20af8:	003ff406 	br	20acc <__alt_data_end+0xfffe0acc>
   20afc:	0005883a 	mov	r2,zero
   20b00:	00000706 	br	20b20 <__sfvwrite_small_dev+0x98>
   20b04:	8080000b 	ldhu	r2,0(r16)
   20b08:	10801014 	ori	r2,r2,64
   20b0c:	8080000d 	sth	r2,0(r16)
   20b10:	00bfffc4 	movi	r2,-1
   20b14:	00000206 	br	20b20 <__sfvwrite_small_dev+0x98>
   20b18:	00bfffc4 	movi	r2,-1
   20b1c:	f800283a 	ret
   20b20:	dfc00517 	ldw	ra,20(sp)
   20b24:	dd000417 	ldw	r20,16(sp)
   20b28:	dcc00317 	ldw	r19,12(sp)
   20b2c:	dc800217 	ldw	r18,8(sp)
   20b30:	dc400117 	ldw	r17,4(sp)
   20b34:	dc000017 	ldw	r16,0(sp)
   20b38:	dec00604 	addi	sp,sp,24
   20b3c:	f800283a 	ret

00020b40 <_write_r>:
   20b40:	defffd04 	addi	sp,sp,-12
   20b44:	dc000015 	stw	r16,0(sp)
   20b48:	040000b4 	movhi	r16,2
   20b4c:	dc400115 	stw	r17,4(sp)
   20b50:	84050404 	addi	r16,r16,5136
   20b54:	2023883a 	mov	r17,r4
   20b58:	2809883a 	mov	r4,r5
   20b5c:	300b883a 	mov	r5,r6
   20b60:	380d883a 	mov	r6,r7
   20b64:	dfc00215 	stw	ra,8(sp)
   20b68:	80000015 	stw	zero,0(r16)
   20b6c:	0020e840 	call	20e84 <write>
   20b70:	00ffffc4 	movi	r3,-1
   20b74:	10c0031e 	bne	r2,r3,20b84 <_write_r+0x44>
   20b78:	80c00017 	ldw	r3,0(r16)
   20b7c:	18000126 	beq	r3,zero,20b84 <_write_r+0x44>
   20b80:	88c00015 	stw	r3,0(r17)
   20b84:	dfc00217 	ldw	ra,8(sp)
   20b88:	dc400117 	ldw	r17,4(sp)
   20b8c:	dc000017 	ldw	r16,0(sp)
   20b90:	dec00304 	addi	sp,sp,12
   20b94:	f800283a 	ret

00020b98 <__divsi3>:
   20b98:	20001b16 	blt	r4,zero,20c08 <__divsi3+0x70>
   20b9c:	000f883a 	mov	r7,zero
   20ba0:	28001616 	blt	r5,zero,20bfc <__divsi3+0x64>
   20ba4:	200d883a 	mov	r6,r4
   20ba8:	29001a2e 	bgeu	r5,r4,20c14 <__divsi3+0x7c>
   20bac:	00800804 	movi	r2,32
   20bb0:	00c00044 	movi	r3,1
   20bb4:	00000106 	br	20bbc <__divsi3+0x24>
   20bb8:	10000d26 	beq	r2,zero,20bf0 <__divsi3+0x58>
   20bbc:	294b883a 	add	r5,r5,r5
   20bc0:	10bfffc4 	addi	r2,r2,-1
   20bc4:	18c7883a 	add	r3,r3,r3
   20bc8:	293ffb36 	bltu	r5,r4,20bb8 <__alt_data_end+0xfffe0bb8>
   20bcc:	0005883a 	mov	r2,zero
   20bd0:	18000726 	beq	r3,zero,20bf0 <__divsi3+0x58>
   20bd4:	0005883a 	mov	r2,zero
   20bd8:	31400236 	bltu	r6,r5,20be4 <__divsi3+0x4c>
   20bdc:	314dc83a 	sub	r6,r6,r5
   20be0:	10c4b03a 	or	r2,r2,r3
   20be4:	1806d07a 	srli	r3,r3,1
   20be8:	280ad07a 	srli	r5,r5,1
   20bec:	183ffa1e 	bne	r3,zero,20bd8 <__alt_data_end+0xfffe0bd8>
   20bf0:	38000126 	beq	r7,zero,20bf8 <__divsi3+0x60>
   20bf4:	0085c83a 	sub	r2,zero,r2
   20bf8:	f800283a 	ret
   20bfc:	014bc83a 	sub	r5,zero,r5
   20c00:	39c0005c 	xori	r7,r7,1
   20c04:	003fe706 	br	20ba4 <__alt_data_end+0xfffe0ba4>
   20c08:	0109c83a 	sub	r4,zero,r4
   20c0c:	01c00044 	movi	r7,1
   20c10:	003fe306 	br	20ba0 <__alt_data_end+0xfffe0ba0>
   20c14:	00c00044 	movi	r3,1
   20c18:	003fee06 	br	20bd4 <__alt_data_end+0xfffe0bd4>

00020c1c <__modsi3>:
   20c1c:	20001716 	blt	r4,zero,20c7c <__modsi3+0x60>
   20c20:	000f883a 	mov	r7,zero
   20c24:	2005883a 	mov	r2,r4
   20c28:	28001216 	blt	r5,zero,20c74 <__modsi3+0x58>
   20c2c:	2900162e 	bgeu	r5,r4,20c88 <__modsi3+0x6c>
   20c30:	01800804 	movi	r6,32
   20c34:	00c00044 	movi	r3,1
   20c38:	00000106 	br	20c40 <__modsi3+0x24>
   20c3c:	30000a26 	beq	r6,zero,20c68 <__modsi3+0x4c>
   20c40:	294b883a 	add	r5,r5,r5
   20c44:	31bfffc4 	addi	r6,r6,-1
   20c48:	18c7883a 	add	r3,r3,r3
   20c4c:	293ffb36 	bltu	r5,r4,20c3c <__alt_data_end+0xfffe0c3c>
   20c50:	18000526 	beq	r3,zero,20c68 <__modsi3+0x4c>
   20c54:	1806d07a 	srli	r3,r3,1
   20c58:	11400136 	bltu	r2,r5,20c60 <__modsi3+0x44>
   20c5c:	1145c83a 	sub	r2,r2,r5
   20c60:	280ad07a 	srli	r5,r5,1
   20c64:	183ffb1e 	bne	r3,zero,20c54 <__alt_data_end+0xfffe0c54>
   20c68:	38000126 	beq	r7,zero,20c70 <__modsi3+0x54>
   20c6c:	0085c83a 	sub	r2,zero,r2
   20c70:	f800283a 	ret
   20c74:	014bc83a 	sub	r5,zero,r5
   20c78:	003fec06 	br	20c2c <__alt_data_end+0xfffe0c2c>
   20c7c:	0109c83a 	sub	r4,zero,r4
   20c80:	01c00044 	movi	r7,1
   20c84:	003fe706 	br	20c24 <__alt_data_end+0xfffe0c24>
   20c88:	00c00044 	movi	r3,1
   20c8c:	003ff106 	br	20c54 <__alt_data_end+0xfffe0c54>

00020c90 <__udivsi3>:
   20c90:	200d883a 	mov	r6,r4
   20c94:	2900152e 	bgeu	r5,r4,20cec <__udivsi3+0x5c>
   20c98:	28001416 	blt	r5,zero,20cec <__udivsi3+0x5c>
   20c9c:	00800804 	movi	r2,32
   20ca0:	00c00044 	movi	r3,1
   20ca4:	00000206 	br	20cb0 <__udivsi3+0x20>
   20ca8:	10000e26 	beq	r2,zero,20ce4 <__udivsi3+0x54>
   20cac:	28000516 	blt	r5,zero,20cc4 <__udivsi3+0x34>
   20cb0:	294b883a 	add	r5,r5,r5
   20cb4:	10bfffc4 	addi	r2,r2,-1
   20cb8:	18c7883a 	add	r3,r3,r3
   20cbc:	293ffa36 	bltu	r5,r4,20ca8 <__alt_data_end+0xfffe0ca8>
   20cc0:	18000826 	beq	r3,zero,20ce4 <__udivsi3+0x54>
   20cc4:	0005883a 	mov	r2,zero
   20cc8:	31400236 	bltu	r6,r5,20cd4 <__udivsi3+0x44>
   20ccc:	314dc83a 	sub	r6,r6,r5
   20cd0:	10c4b03a 	or	r2,r2,r3
   20cd4:	1806d07a 	srli	r3,r3,1
   20cd8:	280ad07a 	srli	r5,r5,1
   20cdc:	183ffa1e 	bne	r3,zero,20cc8 <__alt_data_end+0xfffe0cc8>
   20ce0:	f800283a 	ret
   20ce4:	0005883a 	mov	r2,zero
   20ce8:	f800283a 	ret
   20cec:	00c00044 	movi	r3,1
   20cf0:	003ff406 	br	20cc4 <__alt_data_end+0xfffe0cc4>

00020cf4 <__umodsi3>:
   20cf4:	2005883a 	mov	r2,r4
   20cf8:	2900122e 	bgeu	r5,r4,20d44 <__umodsi3+0x50>
   20cfc:	28001116 	blt	r5,zero,20d44 <__umodsi3+0x50>
   20d00:	01800804 	movi	r6,32
   20d04:	00c00044 	movi	r3,1
   20d08:	00000206 	br	20d14 <__umodsi3+0x20>
   20d0c:	30000c26 	beq	r6,zero,20d40 <__umodsi3+0x4c>
   20d10:	28000516 	blt	r5,zero,20d28 <__umodsi3+0x34>
   20d14:	294b883a 	add	r5,r5,r5
   20d18:	31bfffc4 	addi	r6,r6,-1
   20d1c:	18c7883a 	add	r3,r3,r3
   20d20:	293ffa36 	bltu	r5,r4,20d0c <__alt_data_end+0xfffe0d0c>
   20d24:	18000626 	beq	r3,zero,20d40 <__umodsi3+0x4c>
   20d28:	1806d07a 	srli	r3,r3,1
   20d2c:	11400136 	bltu	r2,r5,20d34 <__umodsi3+0x40>
   20d30:	1145c83a 	sub	r2,r2,r5
   20d34:	280ad07a 	srli	r5,r5,1
   20d38:	183ffb1e 	bne	r3,zero,20d28 <__alt_data_end+0xfffe0d28>
   20d3c:	f800283a 	ret
   20d40:	f800283a 	ret
   20d44:	00c00044 	movi	r3,1
   20d48:	003ff706 	br	20d28 <__alt_data_end+0xfffe0d28>

00020d4c <__mulsi3>:
   20d4c:	0005883a 	mov	r2,zero
   20d50:	20000726 	beq	r4,zero,20d70 <__mulsi3+0x24>
   20d54:	20c0004c 	andi	r3,r4,1
   20d58:	2008d07a 	srli	r4,r4,1
   20d5c:	18000126 	beq	r3,zero,20d64 <__mulsi3+0x18>
   20d60:	1145883a 	add	r2,r2,r5
   20d64:	294b883a 	add	r5,r5,r5
   20d68:	203ffa1e 	bne	r4,zero,20d54 <__alt_data_end+0xfffe0d54>
   20d6c:	f800283a 	ret
   20d70:	f800283a 	ret

00020d74 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   20d74:	deffff04 	addi	sp,sp,-4
   20d78:	010000b4 	movhi	r4,2
   20d7c:	014000b4 	movhi	r5,2
   20d80:	dfc00015 	stw	ra,0(sp)
   20d84:	21048c04 	addi	r4,r4,4656
   20d88:	2944c804 	addi	r5,r5,4896

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   20d8c:	2140061e 	bne	r4,r5,20da8 <alt_load+0x34>
   20d90:	010000b4 	movhi	r4,2
   20d94:	014000b4 	movhi	r5,2
   20d98:	21000804 	addi	r4,r4,32
   20d9c:	29400804 	addi	r5,r5,32
   20da0:	2140121e 	bne	r4,r5,20dec <alt_load+0x78>
   20da4:	00000b06 	br	20dd4 <alt_load+0x60>
   20da8:	00c000b4 	movhi	r3,2
   20dac:	18c4c804 	addi	r3,r3,4896
   20db0:	1907c83a 	sub	r3,r3,r4
   20db4:	0005883a 	mov	r2,zero
  {
    while( to != end )
   20db8:	10fff526 	beq	r2,r3,20d90 <__alt_data_end+0xfffe0d90>
    {
      *to++ = *from++;
   20dbc:	114f883a 	add	r7,r2,r5
   20dc0:	39c00017 	ldw	r7,0(r7)
   20dc4:	110d883a 	add	r6,r2,r4
   20dc8:	10800104 	addi	r2,r2,4
   20dcc:	31c00015 	stw	r7,0(r6)
   20dd0:	003ff906 	br	20db8 <__alt_data_end+0xfffe0db8>
   20dd4:	010000b4 	movhi	r4,2
   20dd8:	014000b4 	movhi	r5,2
   20ddc:	2103f504 	addi	r4,r4,4052
   20de0:	2943f504 	addi	r5,r5,4052

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   20de4:	2140101e 	bne	r4,r5,20e28 <alt_load+0xb4>
   20de8:	00000b06 	br	20e18 <alt_load+0xa4>
   20dec:	00c000b4 	movhi	r3,2
   20df0:	18c00804 	addi	r3,r3,32
   20df4:	1907c83a 	sub	r3,r3,r4
   20df8:	0005883a 	mov	r2,zero
  {
    while( to != end )
   20dfc:	10fff526 	beq	r2,r3,20dd4 <__alt_data_end+0xfffe0dd4>
    {
      *to++ = *from++;
   20e00:	114f883a 	add	r7,r2,r5
   20e04:	39c00017 	ldw	r7,0(r7)
   20e08:	110d883a 	add	r6,r2,r4
   20e0c:	10800104 	addi	r2,r2,4
   20e10:	31c00015 	stw	r7,0(r6)
   20e14:	003ff906 	br	20dfc <__alt_data_end+0xfffe0dfc>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   20e18:	0020fc40 	call	20fc4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   20e1c:	dfc00017 	ldw	ra,0(sp)
   20e20:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   20e24:	0020fc81 	jmpi	20fc8 <alt_icache_flush_all>
   20e28:	00c000b4 	movhi	r3,2
   20e2c:	18c48c04 	addi	r3,r3,4656
   20e30:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   20e34:	0005883a 	mov	r2,zero
  {
    while( to != end )
   20e38:	18bff726 	beq	r3,r2,20e18 <__alt_data_end+0xfffe0e18>
    {
      *to++ = *from++;
   20e3c:	114f883a 	add	r7,r2,r5
   20e40:	39c00017 	ldw	r7,0(r7)
   20e44:	110d883a 	add	r6,r2,r4
   20e48:	10800104 	addi	r2,r2,4
   20e4c:	31c00015 	stw	r7,0(r6)
   20e50:	003ff906 	br	20e38 <__alt_data_end+0xfffe0e38>

00020e54 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   20e54:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   20e58:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   20e5c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   20e60:	0020ee40 	call	20ee4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   20e64:	0020f040 	call	20f04 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   20e68:	d1a04117 	ldw	r6,-32508(gp)
   20e6c:	d1604217 	ldw	r5,-32504(gp)
   20e70:	d1204317 	ldw	r4,-32500(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   20e74:	dfc00017 	ldw	ra,0(sp)
   20e78:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   20e7c:	00202241 	jmpi	20224 <main>

00020e80 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
   20e80:	0020f3c1 	jmpi	20f3c <alt_busy_sleep>

00020e84 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   20e84:	00800044 	movi	r2,1
   20e88:	20800226 	beq	r4,r2,20e94 <write+0x10>
   20e8c:	00800084 	movi	r2,2
   20e90:	2080041e 	bne	r4,r2,20ea4 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   20e94:	010000b4 	movhi	r4,2
   20e98:	000f883a 	mov	r7,zero
   20e9c:	2104c604 	addi	r4,r4,4888
   20ea0:	0020f081 	jmpi	20f08 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   20ea4:	d0a00317 	ldw	r2,-32756(gp)
   20ea8:	10000926 	beq	r2,zero,20ed0 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   20eac:	deffff04 	addi	sp,sp,-4
   20eb0:	dfc00015 	stw	ra,0(sp)
   20eb4:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   20eb8:	00c01444 	movi	r3,81
   20ebc:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   20ec0:	00bfffc4 	movi	r2,-1
   20ec4:	dfc00017 	ldw	ra,0(sp)
   20ec8:	dec00104 	addi	sp,sp,4
   20ecc:	f800283a 	ret
   20ed0:	d0a04004 	addi	r2,gp,-32512
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   20ed4:	00c01444 	movi	r3,81
   20ed8:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   20edc:	00bfffc4 	movi	r2,-1
   20ee0:	f800283a 	ret

00020ee4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   20ee4:	deffff04 	addi	sp,sp,-4
   20ee8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   20eec:	0020fcc0 	call	20fcc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   20ef0:	00800044 	movi	r2,1
   20ef4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   20ef8:	dfc00017 	ldw	ra,0(sp)
   20efc:	dec00104 	addi	sp,sp,4
   20f00:	f800283a 	ret

00020f04 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   20f04:	f800283a 	ret

00020f08 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   20f08:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   20f0c:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   20f10:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   20f14:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   20f18:	2980072e 	bgeu	r5,r6,20f38 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   20f1c:	38c00037 	ldwio	r3,0(r7)
   20f20:	18ffffec 	andhi	r3,r3,65535
   20f24:	183ffc26 	beq	r3,zero,20f18 <__alt_data_end+0xfffe0f18>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   20f28:	28c00007 	ldb	r3,0(r5)
   20f2c:	20c00035 	stwio	r3,0(r4)
   20f30:	29400044 	addi	r5,r5,1
   20f34:	003ff806 	br	20f18 <__alt_data_end+0xfffe0f18>

  return count;
}
   20f38:	f800283a 	ret

00020f3c <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   20f3c:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   20f40:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   20f44:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   20f48:	dc000015 	stw	r16,0(sp)
   20f4c:	dfc00115 	stw	ra,4(sp)
   20f50:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   20f54:	0020c900 	call	20c90 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   20f58:	10001026 	beq	r2,zero,20f9c <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   20f5c:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   20f60:	013999b4 	movhi	r4,58982
   20f64:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   20f68:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   20f6c:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   20f70:	297fffc4 	addi	r5,r5,-1
   20f74:	283ffe1e 	bne	r5,zero,20f70 <__alt_data_end+0xfffe0f70>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   20f78:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   20f7c:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   20f80:	18bffb16 	blt	r3,r2,20f70 <__alt_data_end+0xfffe0f70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   20f84:	01400144 	movi	r5,5
   20f88:	8009883a 	mov	r4,r16
   20f8c:	0020d4c0 	call	20d4c <__mulsi3>
   20f90:	10bfffc4 	addi	r2,r2,-1
   20f94:	103ffe1e 	bne	r2,zero,20f90 <__alt_data_end+0xfffe0f90>
   20f98:	00000506 	br	20fb0 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   20f9c:	01400144 	movi	r5,5
   20fa0:	8009883a 	mov	r4,r16
   20fa4:	0020d4c0 	call	20d4c <__mulsi3>
   20fa8:	10bfffc4 	addi	r2,r2,-1
   20fac:	00bffe16 	blt	zero,r2,20fa8 <__alt_data_end+0xfffe0fa8>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
   20fb0:	0005883a 	mov	r2,zero
   20fb4:	dfc00117 	ldw	ra,4(sp)
   20fb8:	dc000017 	ldw	r16,0(sp)
   20fbc:	dec00204 	addi	sp,sp,8
   20fc0:	f800283a 	ret

00020fc4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   20fc4:	f800283a 	ret

00020fc8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   20fc8:	f800283a 	ret

00020fcc <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   20fcc:	000170fa 	wrctl	ienable,zero
   20fd0:	f800283a 	ret
